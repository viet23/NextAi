import React, { useState } from "react";
import { Layout, Input, Button, Typography, Card, message } from "antd";

const { Content } = Layout;
const { Title } = Typography;
const { TextArea } = Input;

const FacebookPageAnalysis = () => {
  const [url, setUrl] = useState("");
  const [analysis, setAnalysis] = useState({
    overview: "",
    products: "",
    engagement: "",
    strategy: "",
  });
  const [channelPlan, setChannelPlan] = useState("");
  const [loading, setLoading] = useState(false);

  const getChannelPlan = async (rawAnalysis: string) => {
    try {
      const res = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            {
              role: "user",
              content: `
ƒê√¢y l√† ph√¢n t√≠ch n·ªôi dung m·ªôt Fanpage nh√† h√†ng:

${rawAnalysis}

H√£y ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch ph√°t tri·ªÉn k√™nh Facebook Page cho nh√† h√†ng n√†y, g·ªìm:
1. M·ª•c ti√™u k√™nh
2. ƒê·ªãnh v·ªã n·ªôi dung g·ª£i √Ω (t·ª∑ l·ªá %)
3. L·ªãch ƒëƒÉng b√†i m·∫´u tu·∫ßn
4. G·ª£i √Ω ƒë·ªãnh d·∫°ng n·ªôi dung + √ù t∆∞·ªüng viral
(Tr√¨nh b√†y r√µ r√†ng theo b·ªë c·ª•c 2 c·ªôt gi·ªëng b·∫£n k·∫ø ho·∫°ch truy·ªÅn th√¥ng)`,
            },
          ],
          temperature: 0.7,
          max_tokens: 1000,
        }),
      });

      const data = await res.json();
      const content = data?.choices?.[0]?.message?.content || "";
      setChannelPlan(content);
    } catch (err) {
      console.error("‚ùå L·ªói GPT ph√°t tri·ªÉn k√™nh:", err);
    }
  };

  const analyzeFacebookPage = async () => {
    if (!url) {
      message.warning("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng link Facebook Page.");
      return;
    }

    setLoading(true);
    setChannelPlan("");
    setAnalysis({
      overview: "",
      products: "",
      engagement: "",
      strategy: "",
    });

    try {
      // 1. Crawl d·ªØ li·ªáu t·ª´ page
      const crawlRes = await fetch(`${process.env.REACT_APP_URL}/analyze-facebook`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url }),
      });

      const crawlData = await crawlRes.json();
      if (!crawlData.success) {
        message.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Facebook Page.");
        setLoading(false);
        return;
      }

      const { name, description, bodyPreview } = crawlData.data;

      // 2. G·ª≠i GPT ƒë·ªÉ ph√¢n t√≠ch th√†nh 4 ph·∫ßn
      const prompt = `
ƒê√¢y l√† n·ªôi dung c·ªßa m·ªôt Fanpage Facebook:

T√™n page: ${name}
M√¥ t·∫£: ${description}
N·ªôi dung s∆° l∆∞·ª£c: ${bodyPreview}

H√£y ph√¢n t√≠ch n·ªôi dung th√†nh 4 ph·∫ßn:
1. TH√îNG TIN CHUNG
2. S·∫¢N PH·∫®M/D·ªäCH V·ª§
3. T∆Ø∆†NG T√ÅC KH√ÅCH H√ÄNG
4. CHI·∫æN L∆Ø·ª¢C TRUY·ªÄN TH√îNG
`;

      const gptRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.7,
          max_tokens: 700,
        }),
      });

      const gptData = await gptRes.json();
      const content = gptData?.choices?.[0]?.message?.content;

      if (content) {
        const sections = content.split(/\n{2,}/);
        const result = {
          overview: sections.find((s: string) => s.toLowerCase().includes("th√¥ng tin chung")) || "",
          products: sections.find((s: string) => s.toLowerCase().includes("s·∫£n ph·∫©m")) || "",
          engagement: sections.find((s: string) => s.toLowerCase().includes("t∆∞∆°ng t√°c")) || "",
          strategy: sections.find((s: string) => s.toLowerCase().includes("chi·∫øn l∆∞·ª£c")) || "",
        };
        setAnalysis(result);

        // 3. G·ª≠i GPT ti·∫øp ƒë·ªÉ ƒë·ªÅ xu·∫•t ph√°t tri·ªÉn k√™nh
        const rawAnalysis = `
TH√îNG TIN CHUNG: ${result.overview}
S·∫¢N PH·∫®M/D·ªäCH V·ª§: ${result.products}
T∆Ø∆†NG T√ÅC KH√ÅCH H√ÄNG: ${result.engagement}
CHI·∫æN L∆Ø·ª¢C TRUY·ªÄN TH√îNG: ${result.strategy}
`;
        await getChannelPlan(rawAnalysis);
      } else {
        message.error("GPT kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c n·ªôi dung.");
      }
    } catch (err) {
      console.error("‚ùå L·ªói to√†n b·ªô qu√° tr√¨nh:", err);
      message.error("ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Layout style={{ minHeight: "100vh", background: "#fff" }}>
      <Content style={{ padding: 24 }}>
        <div style={{ maxWidth: 1000, margin: "0 auto", marginBottom: 24 }}>
          <Input
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Nh·∫≠p link Facebook Page"
            style={{ marginBottom: 16 }}
          />
          <Button style={{
            backgroundColor: "#D2E3FC",
            color: "#000", // m√†u ch·ªØ ƒëen cho d·ªÖ ƒë·ªçc
            border: "1px solid #D2E3FC",
            borderRadius: 6,
          }} type="primary" loading={loading} onClick={analyzeFacebookPage}>
            Ph√¢n t√≠ch page & G·ª£i √Ω ph√°t tri·ªÉn k√™nh
          </Button>
        </div>

        <div style={{ display: "flex", gap: 24, flexWrap: "wrap", justifyContent: "center" }}>
          {/* C·ªôt tr√°i */}
          <div style={{ flex: 1, minWidth: 400 }}>
            <Title level={4}>üìä Ph√¢n t√≠ch Page</Title>
            <Card>
              <Title level={5}>TH√îNG TIN CHUNG</Title>
              <TextArea
                value={analysis.overview}
                readOnly
                autoSize
                style={{ marginBottom: 12, whiteSpace: "pre-wrap" }}
              />

              <Title level={5}>S·∫¢N PH·∫®M / D·ªäCH V·ª§</Title>
              <TextArea
                value={analysis.products}
                readOnly
                autoSize
                style={{ marginBottom: 12, whiteSpace: "pre-wrap" }}
              />

              <Title level={5}>T∆Ø∆†NG T√ÅC KH√ÅCH H√ÄNG</Title>
              <TextArea
                value={analysis.engagement}
                readOnly
                autoSize
                style={{ marginBottom: 12, whiteSpace: "pre-wrap" }}
              />

              <Title level={5}>CHI·∫æN L∆Ø·ª¢C TRUY·ªÄN TH√îNG</Title>
              <TextArea
                value={analysis.strategy}
                readOnly
                autoSize
                style={{ whiteSpace: "pre-wrap" }}
              />
            </Card>
          </div>


          {/* C·ªôt ph·∫£i */}
          <div style={{ flex: 1, minWidth: 400 }}>
            <Title level={4}>üöÄ ƒê·ªÅ xu·∫•t ph√°t k√™nh Facebook Page</Title>
            <Card>
              <TextArea value={channelPlan} rows={28} readOnly />
            </Card>
          </div>
        </div>
      </Content>
    </Layout>
  );
};

export default FacebookPageAnalysis;
